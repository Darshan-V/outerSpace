{"version":3,"file":"use-last-fm.cjs.production.min.js","sources":["../src/index.ts","../src/lib.ts"],"sourcesContent":["import { TrackImage, State, LastFMResponseBody } from './types';\nimport { parseSong } from './lib';\nimport useSWR from 'swr';\n\n/**\n * Use Last.fm\n * @param username The username of the last.fm user to track\n * @param token Your API token\n * @param interval Optional, this is the interval between each request\n * @param imageSize The size of the image\n */\nexport function useLastFM(\n  username: string,\n  token: string,\n  interval: number = 15 * 1000,\n  imageSize: TrackImage['size'] = 'extralarge',\n): State {\n  const endpoint = `//ws.audioscrobbler.com/2.0/?method=user.getrecenttracks&user=${username}&api_key=${token}&format=json&limit=1`;\n\n  const { data: track = null, error } = useSWR<LastFMResponseBody, Error>(\n    endpoint,\n    { refreshInterval: interval },\n  );\n\n  if (error) {\n    return {\n      status: 'error',\n      song: null,\n    };\n  }\n\n  try {\n    return parseSong(track, imageSize);\n  } catch (e) {\n    return {\n      status: 'error',\n      song: null,\n    };\n  }\n}\n\nexport * from './types';\n","import { LastFMResponseBody, State, TrackImage } from './types';\n\nexport function parseSong(\n  body: LastFMResponseBody | null,\n  imageSize: TrackImage['size'],\n): State {\n  if (!body) {\n    return {\n      status: 'connecting',\n      song: null,\n    };\n  }\n\n  const lastSong = body.recenttracks.track?.[0];\n\n  if (!lastSong || !lastSong['@attr']?.nowplaying) {\n    return {\n      status: 'idle',\n      song: null,\n    };\n  }\n\n  const image = lastSong.image.find(i => {\n    return i.size === imageSize;\n  });\n\n  return {\n    status: 'playing',\n    song: {\n      name: lastSong.name,\n      artist: lastSong.artist['#text'],\n      art: image?.['#text'] ?? lastSong.image[0]['#text'],\n      url: lastSong.url,\n      album: lastSong.album['#text'],\n    },\n  };\n}\n"],"names":["username","token","interval","imageSize","useSWR","refreshInterval","data","track","error","status","song","body","lastSong","recenttracks","_body$recenttracks$tr","_lastSong$Attr","nowplaying","image","find","i","size","name","artist","art","url","album","parseSong","e"],"mappings":"gKAWA,SACEA,EACAC,EACAC,EACAC,YADAD,IAAAA,EAAmB,eACnBC,IAAAA,EAAgC,oBAIMC,mEAF4CJ,cAAoBC,yBAIpG,CAAEI,gBAAiBH,QAFbI,KAAMC,aAAQ,YAAMC,YAMnB,CACLC,OAAQ,QACRC,KAAM,0BCxBVC,EACAR,iBAEKQ,QACI,CACLF,OAAQ,aACRC,KAAM,UAIJE,WAAWD,EAAKE,aAAaN,cAAlBO,EAA0B,OAEtCF,cAAaA,EAAS,iBAATG,EAAmBC,kBAC5B,CACLP,OAAQ,OACRC,KAAM,UAIJO,EAAQL,EAASK,MAAMC,MAAK,SAAAC,UACzBA,EAAEC,OAASjB,WAGb,CACLM,OAAQ,UACRC,KAAM,CACJW,KAAMT,EAASS,KACfC,OAAQV,EAASU,OAAO,SACxBC,mBAAKN,SAAAA,EAAQ,YAAYL,EAASK,MAAM,GAAG,SAC3CO,IAAKZ,EAASY,IACdC,MAAOb,EAASa,MAAM,WDDjBC,CAAUnB,EAAOJ,GACxB,MAAOwB,SACA,CACLlB,OAAQ,QACRC,KAAM"}